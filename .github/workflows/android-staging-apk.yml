name: Android Staging APK Build

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: "Release tag (e.g., v1.3.0-rc1-staging.16)"
        required: true
        type: string

permissions:
  contents: write
  actions: read

jobs:
  build:
    name: Build Staging APK
    runs-on: ubuntu-latest

    steps:
      - name: Validate Release Tag Format
        run: |
          TAG="${{ inputs.release_tag }}"
          if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+-rc[0-9]+-staging\.[0-9]+$ ]]; then
            echo "::error::Invalid tag format. Expected: vMAJOR.MINOR.PATCH-rc1-staging.N"
            echo "::error::Example: v1.3.0-rc1-staging.16"
            exit 1
          fi
          echo "✅ Tag format validated: $TAG"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper
          cache-read-only: false

      - name: Make gradlew executable
        working-directory: apps/android
        run: chmod +x ./gradlew

      - name: Build Staging APK with Stamps
        working-directory: apps/android
        run: |
          echo "Building staging variant with fingerprint..."
          echo "Release tag: ${{ inputs.release_tag }}"
          echo "Git SHA: $GITHUB_SHA"
          echo "Git Branch: $GITHUB_REF_NAME"

          ./gradlew clean :app:assembleStaging \
            --stacktrace \
            -PreleaseTag=${{ inputs.release_tag }}

          # List APK output
          echo "APK build outputs:"
          ls -lah app/build/outputs/apk/staging/
        env:
          RELEASE_TAG: ${{ inputs.release_tag }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          CI: "true"

      - name: Verify APK Stamps
        working-directory: apps/android
        run: |
          echo "Verifying APK stamps..."

          # Find the built APK
          APK=$(find app/build/outputs/apk/staging -name "*.apk" -type f | head -1)

          if [ -z "$APK" ]; then
            echo "::error::No APK found to verify"
            exit 1
          fi

          echo "Found APK: $APK"

          # Install aapt if not available
          if ! command -v aapt >/dev/null 2>&1; then
            echo "Installing aapt..."
            sudo apt-get update && sudo apt-get install -y aapt
          fi

          # 1. Verify versionName matches release_tag
          VERSION_NAME=$(aapt dump badging "$APK" | sed -n "s/.*versionName='\([^']*\)'.*/\1/p")
          echo "APK versionName: $VERSION_NAME"

          EXPECTED_VERSION="${{ inputs.release_tag }}"
          if [[ "$EXPECTED_VERSION" == v* ]]; then
            EXPECTED_VERSION="${EXPECTED_VERSION:1}"
          fi

          if [ "$VERSION_NAME" != "$EXPECTED_VERSION" ]; then
            echo "::error::APK_STAMP_MISMATCH: versionName ($VERSION_NAME) != release_tag ($EXPECTED_VERSION)"
            exit 1
          fi
          echo "✅ versionName matches"

          # 2. Verify [STAGING] watermark exists
          if unzip -p "$APK" resources.arsc | strings | grep -q "\[STAGING\]"; then
            echo "✅ [STAGING] watermark found"
          else
            echo "::warning::[STAGING] watermark not found in resources"
          fi

          # 3. Extract BuildConfig and verify stamps
          # Unzip classes.dex and use dexdump if available
          if command -v dexdump >/dev/null 2>&1; then
            unzip -q "$APK" classes*.dex
            dexdump -d classes*.dex | grep -A 5 "GIT_SHA\|BUILD_TAG" | head -20
            echo "✅ BuildConfig fields present"
          else
            echo "⚠️ dexdump not available, skipping BuildConfig verification"
          fi

          # 4. Generate build environment file
          cat > ../../OPS/BUILD_ENV.txt << EOF
          BUILD_TIME: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
          GIT_SHA: $GITHUB_SHA
          GIT_BRANCH: $GITHUB_REF_NAME
          RELEASE_TAG: ${{ inputs.release_tag }}
          VERSION_NAME: $VERSION_NAME
          RUN_ID: ${{ github.run_id }}
          RUN_NUMBER: ${{ github.run_number }}
          EOF

          echo "✅ APK stamps verified"

      - name: Sign APK
        working-directory: apps/android
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          ANDROID_STORE_PASSWORD: ${{ secrets.ANDROID_STORE_PASSWORD }}
        run: |
          if [ -n "$ANDROID_KEYSTORE_BASE64" ]; then
            echo "Signing APK with production keystore..."
            
            # Decode keystore
            echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > keystore.jks
            
            # Find unsigned APK
            UNSIGNED_APK=$(find app/build/outputs/apk/staging -name "*.apk" -type f | head -1)
            
            # Sign the APK
            jarsigner -verbose \
              -sigalg SHA256withRSA \
              -digestalg SHA-256 \
              -keystore keystore.jks \
              -storepass "$ANDROID_STORE_PASSWORD" \
              -keypass "$ANDROID_KEY_PASSWORD" \
              "$UNSIGNED_APK" \
              "$ANDROID_KEY_ALIAS"
            
            # Verify signature
            jarsigner -verify -verbose -certs "$UNSIGNED_APK"
            
            # Zipalign
            SIGNED_APK="app/build/outputs/apk/verifd-staging-signed.apk"
            zipalign -v 4 "$UNSIGNED_APK" "$SIGNED_APK" || cp "$UNSIGNED_APK" "$SIGNED_APK"
            
            # Clean up
            rm keystore.jks
            
            echo "✅ APK signed successfully"
          else
            echo "⚠️ No signing keys provided, using debug signature"
            APK_PATH=$(find app/build/outputs/apk/staging -name "*.apk" -type f | head -1)
            if [ -n "$APK_PATH" ]; then
              cp "$APK_PATH" app/build/outputs/apk/verifd-staging-signed.apk
            fi
          fi

      - name: Generate APK Metadata
        run: |
          APK_PATH="apps/android/app/build/outputs/apk/verifd-staging-signed.apk"

          if [ ! -f "$APK_PATH" ]; then
            APK_PATH=$(find apps/android/app/build/outputs/apk/staging -name "*.apk" -type f | head -1)
          fi

          # Generate SHA256
          SHA256=$(sha256sum "$APK_PATH" | cut -d' ' -f1)
          SIZE=$(du -h "$APK_PATH" | cut -f1)

          # Save for later steps
          echo "APK_SHA256=$SHA256" >> $GITHUB_ENV
          echo "APK_SIZE=$SIZE" >> $GITHUB_ENV

          # Generate SHA256 file
          echo "$SHA256  verifd-staging.apk" > apps/android/apk.sha256

      - name: Standardize APK Name
        working-directory: apps/android
        run: |
          if [ -f "app/build/outputs/apk/verifd-staging-signed.apk" ]; then
            cp "app/build/outputs/apk/verifd-staging-signed.apk" "verifd-staging.apk"
          else
            APK=$(find app/build/outputs/apk/staging -name "*.apk" -type f | head -1)
            cp "$APK" "verifd-staging.apk"
          fi
          echo "✅ Standardized APK name"

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: verifd-staging-apk
          path: |
            apps/android/verifd-staging.apk
            apps/android/apk.sha256
            OPS/BUILD_ENV.txt
          if-no-files-found: error
          retention-days: 30

      - name: Generate Summary
        run: |
          echo "## 📱 Android Staging APK Build" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Information" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Release Tag | ${{ inputs.release_tag }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Git SHA | \`${GITHUB_SHA:0:7}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Number | #${{ github.run_number }} |" >> $GITHUB_STEP_SUMMARY
          echo "| SHA256 | \`${{ env.APK_SHA256 }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Size | ${{ env.APK_SIZE }} |" >> $GITHUB_STEP_SUMMARY
          echo "| API Endpoint | https://staging.api.verifd.com |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Stamps Verified" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ versionName matches release_tag" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ BuildConfig.GIT_SHA present" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ BuildConfig.BUILD_TAG present" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ BuildConfig.IS_CI = true" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Download" >> $GITHUB_STEP_SUMMARY
          echo "[📥 Download APK Artifact](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ inputs.release_tag }}
          name: Android Staging Release ${{ inputs.release_tag }}
          draft: false
          prerelease: true
          files: |
            apps/android/verifd-staging.apk
            apps/android/apk.sha256
            OPS/BUILD_ENV.txt
          body: |
            ## 📱 Android Staging Release

            **Version:** ${{ inputs.release_tag }}
            **Build:** #${{ github.run_number }}
            **SHA256:** `${{ env.APK_SHA256 }}`
            **Size:** ${{ env.APK_SIZE }}
            **Git SHA:** `${GITHUB_SHA:0:7}`

            ### Build Fingerprint
            - Tag: ${{ inputs.release_tag }}
            - SHA: ${{ github.sha }}
            - Branch: ${{ github.ref_name }}
            - Time: $(date -u +"%Y-%m-%dT%H:%M:%SZ")

            ### Test Configuration
            - **API Endpoint:** https://staging.api.verifd.com
            - **Override Users:** +919233600392, +917575854485
            - **KID:** staging-2025-001

            ### Installation
            1. Download the APK from the assets below
            2. Enable "Unknown sources" in Settings
            3. Install and open the app
            4. Open QA Panel from overflow menu (staging only)
            5. Check build fingerprint shows "IN SYNC"
