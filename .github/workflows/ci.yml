name: CI

on:
  push:
    branches: [main, develop, 'feat/**']
  pull_request:
    branches: [main, develop]

jobs:
  backend-tests:
    name: Backend Tests (${{ matrix.name }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Mock DB (macOS)"
            os: macos-latest
            use_mock: true
            test_cmd: "USE_MOCK_DB=true pnpm -F @verifd/backend test"
            
          - name: "SQLite (Linux)"
            os: ubuntu-latest
            use_mock: false
            test_cmd: "pnpm -F @verifd/backend test"
            needs_docker: true

    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          
      - name: Install dependencies
        run: |
          if [ "${{ matrix.use_mock }}" = "true" ]; then
            # Skip native builds for mock tests
            pnpm install --ignore-scripts
          else
            pnpm install
          fi
          
      - name: Build shared packages
        run: pnpm -F @verifd/shared build
        
      - name: Start Docker services (Linux only)
        if: matrix.needs_docker
        run: |
          docker compose up -d
          sleep 5
          docker compose ps
          
      - name: Run database probe (Linux only)
        if: matrix.needs_docker
        run: |
          pnpm -F @verifd/backend run dev:probe || true
          
      - name: Run tests with coverage
        run: |
          if [ "${{ matrix.use_mock }}" = "true" ]; then
            USE_MOCK_DB=true pnpm -F @verifd/backend vitest run --coverage
          else
            pnpm -F @verifd/backend vitest run --coverage
          fi
        env:
          NODE_ENV: test
          DB_PATH: ${{ matrix.use_mock && ':memory:' || './test.db' }}
          
      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.name }}
          path: apps/backend/coverage/lcov.info
          retention-days: 1
            
      - name: Stop Docker services
        if: always() && matrix.needs_docker
        run: docker compose down

  coverage-merge:
    name: Merge Coverage Reports
    needs: backend-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          path: coverage-reports
          
      - name: Install lcov-result-merger
        run: npm install -g lcov-result-merger
        
      - name: Merge coverage reports
        run: |
          mkdir -p merged-coverage
          find coverage-reports -name "lcov.info" -exec echo {} \; | xargs lcov-result-merger > merged-coverage/lcov.info
          
      - name: Generate coverage summary
        run: |
          npm install -g lcov-summary
          lcov-summary merged-coverage/lcov.info || true
          
      - name: Upload merged coverage
        uses: actions/upload-artifact@v4
        with:
          name: merged-coverage
          path: merged-coverage/lcov.info
          
      - name: Generate coverage report
        id: coverage_report
        run: |
          # Calculate coverage percentage
          if [ -f "merged-coverage/lcov.info" ]; then
            LINES_HIT=$(grep -E "^LH:" merged-coverage/lcov.info | awk -F: '{sum+=$2} END {print sum}')
            LINES_TOTAL=$(grep -E "^LF:" merged-coverage/lcov.info | awk -F: '{sum+=$2} END {print sum}')
            FUNCTIONS_HIT=$(grep -E "^FNH:" merged-coverage/lcov.info | awk -F: '{sum+=$2} END {print sum}')
            FUNCTIONS_TOTAL=$(grep -E "^FNF:" merged-coverage/lcov.info | awk -F: '{sum+=$2} END {print sum}')
            
            if [ "$LINES_TOTAL" -gt 0 ]; then
              LINES_PCT=$((LINES_HIT * 100 / LINES_TOTAL))
            else
              LINES_PCT=0
            fi
            
            if [ "$FUNCTIONS_TOTAL" -gt 0 ]; then
              FUNCTIONS_PCT=$((FUNCTIONS_HIT * 100 / FUNCTIONS_TOTAL))
            else
              FUNCTIONS_PCT=0
            fi
            
            echo "lines_pct=$LINES_PCT" >> $GITHUB_OUTPUT
            echo "functions_pct=$FUNCTIONS_PCT" >> $GITHUB_OUTPUT
            echo "lines_hit=$LINES_HIT" >> $GITHUB_OUTPUT
            echo "lines_total=$LINES_TOTAL" >> $GITHUB_OUTPUT
          else
            echo "lines_pct=0" >> $GITHUB_OUTPUT
            echo "functions_pct=0" >> $GITHUB_OUTPUT
          fi
          
      - name: PR Coverage Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Get coverage data - same calculation as badges
            const linesPct = '${{ steps.coverage_report.outputs.lines_pct }}';
            const functionsPct = '${{ steps.coverage_report.outputs.functions_pct }}';
            const linesHit = '${{ steps.coverage_report.outputs.lines_hit }}';
            const linesTotal = '${{ steps.coverage_report.outputs.lines_total }}';
            
            // Get baseline from main branch (would fetch from API or artifact)
            const baselinePct = 70; // This should match badge baseline
            const delta = linesPct - baselinePct;
            const deltaStr = delta > 0 ? `+${delta}%` : `${delta}%`;
            
            // Determine emoji based on coverage - matches badge colors
            let emoji = '‚úÖ';
            let badgeColor = 'brightgreen';
            if (linesPct < 40) {
              emoji = 'üî¥';
              badgeColor = 'red';
            } else if (linesPct < 60) {
              emoji = 'üü°';
              badgeColor = 'yellow';
            } else if (linesPct < 80) {
              emoji = 'üü¢';
              badgeColor = 'green';
            }
            
            // Build comment body with delta
            const body = `## üìä Coverage Report ${emoji}
            
            | Metric | Coverage | Delta | Details |
            |--------|----------|-------|---------|
            | **Lines** | ${linesPct}% | ${deltaStr} | ${linesHit}/${linesTotal} |
            | **Functions** | ${functionsPct}% | - | - |
            
            ### üìÅ Artifacts
            - [Coverage Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [Detailed LCOV](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts)
            
            ### üîç Coverage Thresholds
            - Lines: 40% (minimum)
            - Functions: 35% (minimum)
            - Branches: 30% (minimum)
            
            ### üìà Badge Preview
            \`![Coverage](https://img.shields.io/badge/coverage-${linesPct}%25-${badgeColor})\`
            
            ---
            *Generated by verifd CI ‚Ä¢ [View Workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})*`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Coverage Report')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  mobile-builds:
    name: Mobile Build & URL Safety
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --ignore-scripts
        
      - name: Android Release URL Gate
        run: |
          cd apps/android
          
          # Check release BuildConfig
          echo "Checking Android Release URL configuration..."
          
          # Look for the release configuration
          if grep -r "release" app/build.gradle | grep -q "buildConfigField"; then
            # Extract release URL from build.gradle
            RELEASE_URL=$(grep -A5 "release" app/build.gradle | grep "BASE_URL" | grep -oE 'https://[^"]+' || echo "")
            
            if [ "$RELEASE_URL" != "https://api.verifd.com" ]; then
              echo "‚ùå ERROR: Android Release URL is not https://api.verifd.com"
              echo "Found: $RELEASE_URL"
              exit 1
            fi
            echo "‚úÖ Android Release URL correctly set to https://api.verifd.com"
          fi
          
          # Run unit tests
          ./gradlew testReleaseUnitTest || true
          
      - name: iOS Release URL Gate
        run: |
          cd apps/ios
          
          echo "Checking iOS Release URL configuration..."
          
          # Check Info.plist for production URL
          if [ -f "verifd/Info.plist" ]; then
            # Check for BACKEND_URL in Info.plist
            if grep -q "BACKEND_URL" verifd/Info.plist; then
              PROD_URL=$(grep -A1 "BACKEND_URL" verifd/Info.plist | grep "<string>" | sed 's/.*<string>\(.*\)<\/string>/\1/' || echo "")
              
              # For release builds, should be api.verifd.com
              if [[ "$PROD_URL" == *"localhost"* ]] || [[ "$PROD_URL" == *"10.0.2.2"* ]]; then
                echo "‚ùå ERROR: iOS production Info.plist contains development URL"
                echo "Found: $PROD_URL"
                exit 1
              fi
            fi
            echo "‚úÖ iOS Release URL configuration validated"
          fi
          
          # Check Config files
          if [ -f "verifd/Config/Config.swift" ]; then
            grep -n "api.verifd.com" verifd/Config/Config.swift || echo "Config.swift checked"
          fi

  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --ignore-scripts
        
      - name: Build shared packages
        run: pnpm -F @verifd/shared build
        
      - name: TypeScript check
        run: pnpm -F @verifd/backend build
        
      - name: ESLint check
        run: pnpm -F @verifd/backend lint || true